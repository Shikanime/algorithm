// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var input = /* array */[
  1,
  12,
  2,
  3,
  1,
  1,
  2,
  3,
  1,
  3,
  4,
  3,
  1,
  5,
  0,
  3,
  2,
  1,
  10,
  19,
  2,
  9,
  19,
  23,
  2,
  23,
  10,
  27,
  1,
  6,
  27,
  31,
  1,
  31,
  6,
  35,
  2,
  35,
  10,
  39,
  1,
  39,
  5,
  43,
  2,
  6,
  43,
  47,
  2,
  47,
  10,
  51,
  1,
  51,
  6,
  55,
  1,
  55,
  6,
  59,
  1,
  9,
  59,
  63,
  1,
  63,
  9,
  67,
  1,
  67,
  6,
  71,
  2,
  71,
  13,
  75,
  1,
  75,
  5,
  79,
  1,
  79,
  9,
  83,
  2,
  6,
  83,
  87,
  1,
  87,
  5,
  91,
  2,
  6,
  91,
  95,
  1,
  95,
  9,
  99,
  2,
  6,
  99,
  103,
  1,
  5,
  103,
  107,
  1,
  6,
  107,
  111,
  1,
  111,
  10,
  115,
  2,
  115,
  13,
  119,
  1,
  119,
  6,
  123,
  1,
  123,
  2,
  127,
  1,
  127,
  5,
  0,
  99,
  2,
  14,
  0,
  0
];

function solve(_counter, frame) {
  while(true) {
    var counter = _counter;
    var match = frame[counter];
    var switcher = match - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var a = frame[frame[counter + 1 | 0]];
        var b = frame[frame[counter + 2 | 0]];
        Caml_array.caml_array_set(frame, frame[counter + 3 | 0], Caml_int32.imul(a, b));
        _counter = counter + 4 | 0;
        continue ;
      } else {
        var a$1 = frame[frame[counter + 1 | 0]];
        var b$1 = frame[frame[counter + 2 | 0]];
        Caml_array.caml_array_set(frame, frame[counter + 3 | 0], a$1 + b$1 | 0);
        _counter = counter + 4 | 0;
        continue ;
      }
    } else if (switcher !== 98) {
      _counter = counter + 4 | 0;
      continue ;
    } else {
      return $$Array.fold_left((function (a, b) {
                    return a + ("," + String(b));
                  }), "", frame);
    }
  };
}

Pervasives.print_string(solve(0, input));

exports.input = input;
exports.solve = solve;
/*  Not a pure module */
